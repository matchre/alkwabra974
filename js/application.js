// Generated by CoffeeScript 1.10.0

/* 
  jQuery Mobile Boilerplate
  application.coffee
 */

(function() {
  var Card, Fraction, ability_to_delete_useless_card, addPower, animation_tap, animation_touch, astuces, beurk, block, blockOrNot, blocked, boolean_reset, chapter, checkSuccess, crossPower, delay, draggableCards, dropOnce, dropdenPower, dropnumPower, droppableFrac, droppableFracAddition, droppableFracSimplify, droppableSide, explosion_effect, flash_alert, game_chapter, get_card, insert, level, level_data, looping, multPower, negPower, new_power, opposite, play, primeFactorPower, primeFactorization, primePower, ready, ref, ref1, ref2, ref3, reversePower, score, shots, shuffle_cards, stylePower, toSend_reset, unblock, unique_id, update_style, won,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  game_chapter = {
    1: {
      level: {
        1: {
          lhs: ["x", "0", "0"],
          shots: 2
        },
        2: {
          lhs: ["x", "0", "0", "0"],
          shots: 3
        },
        3: {
          lhs: ["x", "2", "-2", "t", "-t"],
          shots: 4
        },
        4: {
          lhs: ["x", "4", "-4", "p", "-p"],
          shots: 4
        },
        5: {
          lhs: ["p"],
          rhs: ["x", "g", "-g", "t", "-t"],
          shots: 4
        },
        6: {
          lhs: ["x", "s", "-s"],
          rhs: ["0", "s", "r"],
          shots: 3
        },
        7: {
          lhs: ["5", "-5", "g", "r"],
          rhs: ["x", "0"],
          shots: 3
        },
        8: {
          lhs: ["x", "p", "-p", "0"],
          rhs: ["r", "d", "s", "-s", "0"],
          shots: 6
        },
        9: {
          lhs: ["x", "g"],
          rhs: ["s"],
          pioche: ["-g"],
          shots: 3
        },
        10: {
          lhs: ["t", "-m"],
          rhs: ["x", "-m"],
          pioche: ["m"],
          shots: 5
        },
        11: {
          lhs: ["t", "-w"],
          rhs: ["x", "t"],
          pioche: ["-p", "-t", "-s", "6", "b", "m", "d", "g"],
          shots: 7
        },
        12: {
          lhs: ["x", "-r", "d"],
          rhs: ["p", "0"],
          pioche: ["-w", "-t", "-d", "-g", "b", "r", "p", "s"],
          shots: 7
        },
        13: {
          lhs: ["x", "a"],
          rhs: ["p"],
          pioche: ["-a"],
          reveal: ["a"],
          shots: 3
        },
        14: {
          lhs: ["p", "r"],
          rhs: ["d", "x", "c", "-c"],
          pioche: ["-d", "-p", "-r"],
          reveal: ["c"],
          shots: 5
        },
        15: {
          lhs: ["d", "b", "p", "-d"],
          rhs: ["p", "x", "c"],
          pioche: ["-p", "-c", "-d"],
          reveal: ["c"],
          shots: 10
        },
        16: {
          lhs: ["t"],
          rhs: ["p", "x"],
          pioche: ["p"],
          shots: 4
        },
        17: {
          lhs: ["g", "t", "r"],
          rhs: ["r", "x", "g", "p"],
          pioche: ["p", "r", "g"],
          shots: 13
        },
        18: {
          lhs: ["x", "c", "-p", "p", "t"],
          rhs: ["m"],
          pioche: ["t", "c", "m"],
          reveal: ["c"],
          shots: 8
        },
        19: {
          lhs: ["x", "-t", "m"],
          rhs: ["s", "-s", "d", "-t"],
          pioche: ["m", "t"],
          reveal: ["x"],
          shots: 10
        },
        20: {
          lhs: ["x", "-b", "c"],
          rhs: ["c", "t", "-b"],
          pioche: ["b", "p", "c", "t"],
          reveal: ["x", "c"],
          shots: 10
        }
      }
    },
    2: {
      level: {
        1: {
          lhs: ["x", "-1", "p/p"],
          rhs: ["-g"],
          shots: 3
        },
        2: {
          lhs: ["b/-b", "t/t", "d"],
          rhs: ["-1", "-1", "t/t", "a/a", "x"],
          reveal: ["a"],
          shots: 7
        },
        3: {
          lhs: ["1", "t"],
          rhs: ["-x/-x", "x", "x/x"],
          pioche: ["1"],
          shots: 10
        },
        4: {
          lhs: ["-1", "c", "d", "x", "-d", "-s/-s"],
          rhs: ["-g"],
          pioche: ["1", "c", "2", "s"],
          reveal: ["c", "d"],
          shots: 8
        },
        5: {
          lhs: ["x.1"],
          rhs: ["m"],
          shots: 1
        },
        6: {
          lhs: ["1.x.1"],
          rhs: ["b", "p.t/t", "-p.r/r"],
          shots: 8
        },
        7: {
          lhs: ["m.x/m"],
          rhs: ["s", "1.1.1.-d", "1.1.d.1.1"],
          shots: 11
        },
        8: {
          lhs: ["t", "m"],
          rhs: ["x.3/3", "t"],
          pioche: ["t"],
          shots: 7
        },
        9: {
          lhs: ["r.b/b", "x"],
          rhs: ["1/b", "r", "-p/p", "p/p"],
          pioche: ["r"],
          shots: 8
        },
        10: {
          lhs: ["x", "-c.-t/-t", "b.s.4.c.-b/-b.4.s.b"],
          rhs: ["p"],
          reveal: ["c"],
          shots: 12
        },
        11: {
          lhs: ["b.x/_"],
          rhs: ["m", "g"],
          pioche: ["b"],
          shots: 3
        },
        12: {
          lhs: ["p.x"],
          rhs: ["2", "-2", "b"],
          pioche: ["p"],
          shots: 5
        },
        13: {
          lhs: ["m"],
          rhs: ["-1", "x.-4.t", "1"],
          pioche: ["t", "4"],
          shots: 8
        },
        14: {
          lhs: ["-s.x"],
          rhs: ["-s/-s", "b"],
          pioche: ["s"],
          shots: 4
        },
        15: {
          lhs: ["b", "-1", "t/t"],
          rhs: ["z.x"],
          pioche: ["z"],
          shots: 6
        },
        16: {
          lhs: ["t"],
          rhs: ["-b.x", "m", "-m", "-r"],
          pioche: ["r", "b"],
          shots: 8
        },
        17: {
          lhs: ["r", "m.x"],
          rhs: ["t"],
          pioche: ["m", "r"],
          shots: 6
        },
        18: {
          lhs: ["0", "s.x"],
          rhs: ["3", "d/d", "-1"],
          pioche: ["3", "d", "s", "1"],
          reveal: ["x"],
          shots: 7
        },
        19: {
          lhs: ["r", "0"],
          rhs: ["x.6", "t", "0"],
          pioche: ["6", "t"],
          reveal: ["x"],
          shots: 8
        },
        20: {
          lhs: ["x.-f.-d", "m"],
          rhs: ["1", "g", "0"],
          pioche: ["d", "m", "f"],
          reveal: ["x", "f"],
          shots: 10
        }
      }
    },
    3: {
      level: {
        1: {
          lhs: ["p"],
          rhs: ["t", "x"],
          shots: 1
        },
        2: {
          lhs: ["x", "b", "m", "r"],
          rhs: ["b", "g", "m", "r"],
          shots: 9
        },
        3: {
          lhs: ["x", "s", "-s", "m/k", "t"],
          rhs: ["g", "t"],
          shots: 6
        },
        4: {
          lhs: ["h"],
          rhs: ["x.s", "b"],
          pioche: ["s"],
          shots: 4
        },
        5: {
          lhs: ["x.-g", "p", "-p", "r"],
          rhs: ["r", "b"],
          pioche: ["r", "g"],
          shots: 8
        },
        6: {
          lhs: ["p", "m"],
          rhs: ["3/r", "p", "-x"],
          shots: 5
        },
        7: {
          lhs: ["x._/d"],
          rhs: ["m", "g"],
          pioche: ["d"],
          shots: 3
        },
        8: {
          lhs: ["1"],
          rhs: ["-b", "b", "m", "x/t"],
          pioche: ["t", "b", "m"],
          shots: 7
        },
        9: {
          lhs: ["x/-m.g", "-l"],
          rhs: ["1/g", "d/d", "-1", "-l"],
          pioche: ["m", "g", "1"],
          shots: 15
        },
        10: {
          lhs: ["1.m.c", "-s/t", "s/t"],
          rhs: ["c.x.-r/t"],
          pioche: ["s", "r", "c", "t"],
          shots: 18
        },
        11: {
          lhs: ["t/x"],
          rhs: ["1"],
          pioche: ["x"],
          shots: 4
        },
        12: {
          lhs: ["r"],
          rhs: ["-p/x.t"],
          pioche: ["x", "r", "t", "p"],
          shots: 6
        },
        13: {
          lhs: ["1"],
          rhs: ["d/x", "-1/x"],
          pioche: ["x"],
          shots: 6
        },
        14: {
          lhs: ["j/x", "1/x"],
          rhs: ["h", "j/x"],
          pioche: ["j", "h", "x"],
          shots: 13
        },
        15: {
          lhs: ["x.-r/b", "s"],
          rhs: ["2.-r", "s"],
          pioche: ["x", "b", "2", "s", "-r"],
          reveal: ["x", "b"],
          shots: 11
        },
        16: {
          lhs: ["a.x", "b"],
          rhs: ["d"],
          pioche: ["x", "a", "b", "d"],
          reveal: ["x", "a", "b", "d"],
          shots: 4
        },
        17: {
          lhs: ["b", "q"],
          rhs: ["a/x", "q"],
          pioche: ["x", "b", "q"],
          reveal: ["x", "b"],
          shots: 9
        },
        18: {
          lhs: ["j", "3"],
          rhs: ["g.x/i", "d/i", "3"],
          pioche: ["g", "i", "j", "d", "3"],
          reveal: ["all"],
          shots: 12
        },
        19: {
          lhs: ["x/c.b", "2/c"],
          rhs: ["d", "2/c"],
          pioche: ["c", "d", "b", "2"],
          reveal: ["all"],
          shots: 13
        },
        20: {
          lhs: ["4", "f"],
          rhs: ["c/x", "4"],
          pioche: ["f", "c", "x", "4"],
          reveal: ["all"],
          shots: 9
        }
      }
    },
    4: {
      level: {
        1: {
          lhs: ["x", "2", "3"],
          rhs: ["b"],
          pioche: ["5"],
          shots: 2
        },
        2: {
          lhs: ["4", "r.s"],
          rhs: ["3", "x.m", "1"],
          pioche: ["m", "4"],
          shots: 7
        },
        3: {
          lhs: ["x/l", "3", "2"],
          rhs: ["6"],
          pioche: ["2", "3", "6", "l"],
          shots: 7
        },
        4: {
          lhs: ["x.6/2.3"],
          rhs: ["b"],
          shots: 6
        },
        5: {
          lhs: ["x.2/6"],
          rhs: ["s"],
          pioche: ["3"],
          shots: 5
        },
        6: {
          lhs: ["x.4/2"],
          rhs: ["g.6/3"],
          pioche: ["2"],
          shots: 12
        },
        7: {
          lhs: ["t"],
          rhs: ["2/4", "x/2"],
          pioche: ["2", "1"],
          shots: 8
        },
        8: {
          lhs: ["x.2.3/6"],
          rhs: ["h"],
          shots: 3
        },
        9: {
          lhs: ["x.3.2"],
          rhs: ["m.3.2"],
          pioche: ["6"],
          shots: 7
        },
        10: {
          lhs: ["x/2.3", "g/6"],
          rhs: ["t"],
          pioche: ["6"],
          shots: 7
        },
        11: {
          lhs: ["2.3", "b"],
          rhs: ["3", "3", "6/x"],
          pioche: ["6", "x", "b"],
          shots: 11
        },
        12: {
          lhs: ["x.2.3"],
          rhs: ["p.6"],
          pioche: ["6"],
          reveal: ["numbers"],
          shots: 6
        },
        13: {
          lhs: ["x/2", "1/4"],
          rhs: ["s"],
          pioche: ["1", "2", "4"],
          reveal: ["numbers"],
          shots: 7
        },
        14: {
          lhs: ["x.6/2"],
          rhs: ["e"],
          pioche: ["3"],
          reveal: ["all"],
          shots: 4
        },
        15: {
          lhs: ["a", "6", "d", "-1"],
          rhs: ["3", "x/b", "2"],
          pioche: ["a", "b"],
          reveal: ["a", "b", "x", "numbers"],
          shots: 8
        },
        16: {
          lhs: ["x.a.3/6", "1"],
          rhs: ["j.2/8", "1"],
          pioche: ["2", "a"],
          reveal: ["a", "x", "numbers"],
          shots: 16
        },
        17: {
          lhs: ["6", "a"],
          rhs: ["x.d", "3"],
          pioche: ["3", "d"],
          reveal: ["all"],
          shots: 5
        },
        18: {
          lhs: ["c/x", "3"],
          rhs: ["4"],
          pioche: ["3", "1", "4", "x"],
          reveal: ["all"],
          shots: 6
        },
        19: {
          lhs: ["g.x/d.x.h", "4.2"],
          rhs: ["7", "x.b/d"],
          pioche: ["b", "d", "h"],
          reveal: ["all"],
          shots: 15
        },
        20: {
          lhs: ["x.d.3/2", "e.x.x"],
          rhs: ["b.x"],
          pioche: ["x", "e", "b", "d"],
          reveal: ["all"],
          shots: 11
        }
      }
    },
    5: {
      level: {
        1: {
          lhs: ["-1.-x"],
          rhs: ["t"],
          shots: 2
        },
        2: {
          lhs: ["x.-t.-r/t.r"],
          rhs: ["m"],
          shots: 5
        },
        3: {
          lhs: ["t"],
          rhs: ["x.b.-r/r.-b"],
          shots: 5
        },
        4: {
          lhs: ["-v", "-1.-v", "p"],
          rhs: ["-1.b", "x", "b"],
          shots: 8
        },
        5: {
          lhs: ["p"],
          rhs: ["b.-r.m.-g.x.s.-t/g.-m.r.-b.t.-s"],
          shots: 15
        },
        6: {
          lhs: ["g.m/-g.m", "g.m/g.m", "x"],
          rhs: ["s"],
          pioche: ["s", "m", "g"],
          shots: 10
        },
        7: {
          lhs: ["r"],
          rhs: ["-1.-x", "-u/u", "1"],
          pioche: ["1", "u"],
          shots: 7
        },
        8: {
          lhs: ["-1.-x", "t.m"],
          rhs: ["-p/p"],
          pioche: ["1", "d", "m", "p", "t"],
          shots: 6
        },
        9: {
          lhs: ["x.b", "-c.d"],
          rhs: ["x/-x", "b"],
          pioche: ["c", "d", "b"],
          reveal: ["c"],
          shots: 10
        },
        10: {
          lhs: ["-r.-1.x.g/r"],
          rhs: ["v.g"],
          pioche: ["v", "g"],
          shots: 9
        },
        11: {
          lhs: ["-x", "t", "-r.m/m"],
          rhs: ["v.s"],
          pioche: ["v", "s"],
          shots: 4
        },
        12: {
          lhs: ["b"],
          rhs: ["-1.x.a/-a"],
          pioche: ["a"],
          shots: 7
        },
        13: {
          lhs: ["-1.f", "x.-h", "f"],
          rhs: ["r.e"],
          pioche: ["h", "f", "e"],
          reveal: ["h", "f", "e"],
          shots: 7
        },
        14: {
          lhs: ["x"],
          rhs: ["x", "x"],
          shots: 2
        },
        15: {
          lhs: ["x"],
          rhs: ["x", "x"],
          reveal: ["x"],
          shots: 2
        },
        16: {
          lhs: ["x.-6/2.3"],
          rhs: ["t"],
          pioche: ["1"],
          shots: 7
        },
        17: {
          lhs: ["-c/-2"],
          rhs: ["x/4", "a", "a", "-1.a"],
          pioche: ["1", "a", "c", "4"],
          reveal: ["a", "x", "c"],
          shots: 12
        },
        18: {
          lhs: ["-x/d.-b"],
          rhs: ["4/-4.-d.b"],
          pioche: ["1", "d", "b"],
          reveal: ["all"],
          shots: 13
        },
        19: {
          lhs: ["x.3.-2"],
          rhs: ["2.-2", "4", "e"],
          pioche: ["6"],
          reveal: ["all"],
          shots: 13
        },
        20: {
          lhs: ["b/-4", "-1.-3"],
          rhs: ["x/2", "-1.-3"],
          pioche: ["2", "3"],
          reveal: ["all"],
          shots: 14
        }
      }
    }
  };

  ref = [1, 1, 1], unique_id = ref[0], chapter = ref[1], level = ref[2];

  ref1 = [
    {}, {
      lhs: "rhs",
      rhs: "lhs"
    }
  ], level_data = ref1[0], opposite = ref1[1];

  ref2 = [0, 0, 0], score = ref2[0], shots = ref2[1], beurk = ref2[2];

  ref3 = [true, false, false, false, false, false, false, false, false, false, false, false], dropOnce = ref3[0], blocked = ref3[1], reversePower = ref3[2], dropdenPower = ref3[3], dropnumPower = ref3[4], stylePower = ref3[5], crossPower = ref3[6], addPower = ref3[7], primePower = ref3[8], multPower = ref3[9], negPower = ref3[10], won = ref3[11];

  toSend_reset = function() {
    var ref4;
    return ref4 = [0, 0, 0], score = ref4[0], shots = ref4[1], beurk = ref4[2], ref4;
  };

  boolean_reset = function() {
    var ref4;
    return ref4 = [true, false, false, false, false, false, false, false, false, false, false, false], dropOnce = ref4[0], blocked = ref4[1], reversePower = ref4[2], dropdenPower = ref4[3], dropnumPower = ref4[4], stylePower = ref4[5], crossPower = ref4[6], addPower = ref4[7], primePower = ref4[8], multPower = ref4[9], negPower = ref4[10], won = ref4[11], ref4;
  };

  get_card = function(cardOrId) {
    var card;
    if ($.isNumeric(cardOrId)) {
      card = new Card($("#" + cardOrId).attr("data-valeur"));
      card.id = $("#" + cardOrId).attr("id");
    } else {
      card = new Card(cardOrId.attr("data-valeur"));
      card.id = cardOrId.attr("id");
    }
    return card;
  };

  Card = (function() {
    function Card(string1) {
      this.string = string1;
      this.id = unique_id++;
    }

    Card.prototype.to_html = function() {
      var ref4;
      switch (this.string) {
        case "_":
          return "<div id='" + this.id + "' class='carte US' data-valeur='_' data-style='" + stylePower + "'>&nbsp;</div>";
        default:
          if ((indexOf.call(level_data.reveal, "all") >= 0) || (ref4 = this.string, indexOf.call(level_data.reveal, ref4) >= 0) || ($.isNumeric(this.string) && (indexOf.call(level_data.reveal, "numbers") >= 0))) {
            return "<div id='" + this.id + "' class='carte' data-valeur='" + this.string + "' data-style='" + stylePower + "' style='background-image : none;'>" + this.string + "</div>";
          } else {
            return "<div id='" + this.id + "' class='carte' data-valeur='" + this.string + "' data-style='" + stylePower + "' style='background-image : url(./assets/cartes/" + this.string + ".png);'>&nbsp;</div>";
          }
      }
    };

    Card.prototype.moveTo = function(string1) {
      this.string = string1;
      $("#" + this.id).replaceWith(this.to_html());
      return draggableCards();
    };

    Card.prototype.reverse = function() {
      switch (this.string[0]) {
        case "0":
          this.string = this.string;
          break;
        case "-":
          this.string = this.string.slice(1);
          break;
        default:
          this.string = "-" + this.string;
      }
      return this.moveTo(this.string);
    };

    return Card;

  })();

  Fraction = (function() {
    function Fraction(string) {
      var fraction_split;
      this.id = unique_id++;
      fraction_split = string.split("/");
      this.numerateur = fraction_split[0].split(".");
      this.denominateur = fraction_split[1] != null ? fraction_split[1].split(".") : [];
    }

    Fraction.prototype.to_html = function() {
      var d, fraction, i, k, l, len, len1, n, ref4, ref5, ref6;
      ref4 = ["", ""], n = ref4[0], d = ref4[1];
      ref5 = this.numerateur;
      for (k = 0, len = ref5.length; k < len; k++) {
        i = ref5[k];
        n += (new Card(i)).to_html();
      }
      ref6 = this.denominateur;
      for (l = 0, len1 = ref6.length; l < len1; l++) {
        i = ref6[l];
        d += (new Card(i)).to_html();
      }
      return fraction = "<div id='" + this.id + "' class='fraction' data-style='" + stylePower + "'>\n    <div id='numerateur_" + this.id + "' class='numerateur' data-style='" + stylePower + "'>" + n + "</div>\n    <div id='denominateur_" + this.id + "' class='denominateur' data-style='" + stylePower + "'>" + d + "</div>\n</div>";
    };

    return Fraction;

  })();

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  looping = function(ms, func) {
    return setInterval(func, ms);
  };

  explosion_effect = function(place_id, target) {
    var id, position;
    position = $("#" + place_id).offset();
    $("body").append("<div id='" + (id = unique_id++) + "' style='top: " + (position.top - 25) + "px; left: " + (position.left - 25) + "px;' class='explosion'></div>");
    $("#" + id).css({
      background: "url('./assets/explosion.gif?" + (Math.random()) + "')"
    });
    target.remove();
    return $("#" + id).fadeOut(800, function() {
      shots++;
      $("#shots").html("level " + chapter + "-" + level + "<br>" + shots + "/" + level_data.shots);
      return checkSuccess();
    });
  };

  primeFactorization = function(num) {
    var result, root, x;
    root = Math.sqrt(num);
    result = arguments[1] || [];
    x = 2;
    if (num % x) {
      x = 3;
      while (num % x && (x = x + 2) < root) {
        continue;
      }
    }
    x = x <= root ? x : num;
    result.push(x);
    if (x === num) {
      return result;
    } else {
      return primeFactorization(num / x, result);
    }
  };

  shuffle_cards = function(container) {
    var calc_overlap, filled_areas, maxSearchIterations, max_x, max_y, min_x, min_y, randomize;
    maxSearchIterations = 20;
    min_x = container.position().left;
    max_x = min_x + container.width() - $(".fraction").first().width();
    min_y = container.position().top;
    max_y = min_y + container.height() - $(".fraction").first().height();
    filled_areas = [];
    calc_overlap = function(a1) {
      var a2, i, intersection, overlap, ref4, ref5, ref6, x1, x2, y1, y2;
      ref4 = [0, 0], overlap = ref4[0], i = ref4[1];
      while (i < filled_areas.length) {
        a2 = filled_areas[i];
        if (!((a1.x + a1.width < a2.x) || (a2.x + a2.width < a1.x) || (a1.y + a1.height < a2.y) || (a2.y + a2.height < a1.y))) {
          ref5 = [Math.max(a1.x, a2.x), Math.max(a1.y, a2.y)], x1 = ref5[0], y1 = ref5[1];
          ref6 = [Math.min(a1.x + a1.width, a2.x + a2.width), Math.min(a1.y + a1.height, a2.y + a2.height)], x2 = ref6[0], y2 = ref6[1];
          intersection = (x1 - x2) * (y1 - y2);
          overlap += intersection;
        }
        i++;
      }
      return overlap;
    };
    randomize = function(container) {
      filled_areas.splice(0, filled_areas.length);
      return container.children(".fraction").each(function() {
        var area, best_choice, i, overlap, rand_x, rand_y, ref4, ref5, smallest_overlap;
        ref4 = [0, 9007199254740992], i = ref4[0], smallest_overlap = ref4[1];
        while (i++ < maxSearchIterations) {
          rand_x = Math.round((max_x - min_x) * Math.random());
          rand_y = Math.round((max_y - min_y) * Math.random());
          area = {
            x: rand_x,
            y: rand_y,
            width: $(this).width(),
            height: $(this).height()
          };
          overlap = calc_overlap(area);
          if (overlap < smallest_overlap) {
            ref5 = [overlap, area], smallest_overlap = ref5[0], best_choice = ref5[1];
          }
          if (overlap === 0) {
            break;
          }
        }
        filled_areas.push(best_choice);
        return $(this).css({
          position: "absolute",
          left: rand_x,
          top: rand_y
        });
      });
    };
    return randomize(container);
  };

  checkSuccess = function() {
    var x, xSide;
    if (!won) {
      console.log("check success...");
      x = $("#lhs, #rhs").find(".carte[data-valeur='x']");
      if (x.length === 1) {
        xSide = x.parent().parent().parent();
        if (xSide.find(".carte").length === 1) {
          console.log("success !");
          $("button").button("disable");
          won = true;
          $("#lhs, #rhs").droppable("destroy");
          $("#astuce").hide();
          $("#victory-anime").show();
          return delay(5000, function() {
            var count_beurk;
            $("#victory-anime").hide();
            count_beurk = function() {
              var clone_list, denominateur, i, item, item2, items_left, j, k, l, len, len1, len2, list, m, numerateur, ref4, ref5, split, value_side;
              beurk = 0;
              items_left = {};
              list = [];
              value_side = opposite[xSide.attr("data-side")];
              $("#" + value_side).find(".fraction").each(function() {
                var denominateur, numerateur, ref4, string;
                ref4 = [[], []], numerateur = ref4[0], denominateur = ref4[1];
                $(this).find(".numerateur   .carte").each(function() {
                  return numerateur.push($(this).attr("data-valeur"));
                });
                $(this).find(".denominateur .carte").each(function() {
                  return denominateur.push($(this).attr("data-valeur"));
                });
                if (denominateur === []) {
                  list.push(string = numerateur.sort().join("."));
                  return items_left[string] = $(this).attr("id");
                } else {
                  list.push(string = [numerateur.sort().join("."), denominateur.sort().join(".")].join("/"));
                  return items_left[string] = $(this).attr("id");
                }
              });
              clone_list = list.slice(0);
              console.log("voici la clone_liste :p " + clone_list);
              while (clone_list.length > 0) {
                item = clone_list.pop();
                split = item.split("/");
                numerateur = split[0];
                denominateur = split.length > 1 ? split[1] : "";
                if (((numerateur !== "1") && (numerateur !== "-1") && (numerateur.indexOf(".1") > -1)) || (numerateur.indexOf("0") > -1)) {
                  beurk++;
                  $("#" + items_left[item]).css({
                    backgroundColor: "red"
                  });
                }
                if (denominateur.indexOf("1") > -1) {
                  beurk++;
                  $("#" + items_left[item]).css({
                    backgroundColor: "red"
                  });
                }
                if (denominateur.length > 0) {
                  ref4 = numerateur.split(".");
                  for (k = 0, len = ref4.length; k < len; k++) {
                    i = ref4[k];
                    ref5 = denominateur.split(".");
                    for (l = 0, len1 = ref5.length; l < len1; l++) {
                      j = ref5[l];
                      if (((("-" + i) === ("" + j)) || (("-" + j) === ("" + i)) || (("" + j) === ("" + i))) && (chapter > 2)) {
                        $("#" + items_left[item]).css({
                          backgroundColor: "red"
                        });
                        beurk++;
                      }
                    }
                  }
                }
              }
              console.log("voici la liste : " + list);
              while (list.length > 0) {
                item = list.pop();
                for (m = 0, len2 = list.length; m < len2; m++) {
                  item2 = list[m];
                  console.log("let's compare " + item + " | " + item2);
                  if ((("-" + item) === ("" + item2)) || (("-" + item2) === ("" + item)) || (("-1." + item) === ("" + item2)) || (("-1." + item2) === ("" + item))) {
                    $("#" + items_left[item] + ", #" + items_left[item2]).css({
                      backgroundColor: "red"
                    });
                    beurk++;
                  }
                }
              }
              return beurk;
            };
            beurk = count_beurk();
            return delay(1000, function() {
              var $div, i, img, k, previous_score, ref4;
              $("#stars").remove();
              $div = $("<div>", {
                id: "stars",
                "class": "reward"
              });
              img = "<div class='star-reward'></div>";
              $div.append(img);
              score = 1;
              console.log("beurks : " + beurk);
              if (beurk === 0) {
                $div.append(img);
                score++;
                if (shots <= level_data.shots) {
                  $div.append(img);
                  score++;
                }
              }
              $("#victory-recap").append($div);
              previous_score = $("#score" + chapter + "-" + level).find(".star-point").length;
              if (score > previous_score) {
                for (i = k = 1, ref4 = score - previous_score; 1 <= ref4 ? k <= ref4 : k >= ref4; i = 1 <= ref4 ? ++k : --k) {
                  $("#score" + chapter + "-" + level).append("<div class='star-point'></div>");
                }
              }
              if (level === 20) {
                $(".next").hide();
                $(".up").show();
              } else {
                $(".next,.up").show();
              }
              $("#victory-recap").show().fireworks();
              return $("button").button("enable");
            });
          });
        }
      }
    }
  };

  update_style = function() {
    $(".bsign").remove();
    return $("#lhs .fraction:not(:first-child), #rhs .fraction:not(:first-child)").before("<span class='bsign'>+</span>");
  };

  flash_alert = function(element) {
    $("#wow-dialog").dialog("close");
    $("#wow-dialog").dialog({
      width: '50px',
      height: 100,
      show: {
        effect: "blind",
        duration: 100
      },
      open: function(event, ui) {
        return setTimeout(function() {
          return $('#wow-dialog').dialog('close');
        }, 1000);
      },
      position: {
        my: "center bottom",
        at: "center top",
        of: element
      }
    });
    return $("#wow-dialog").dialog("open");
  };

  block = function(draggable) {
    console.log("Entering block mode...");
    $("body").off("click", "#pioche .carte");
    $("body").off("click", ".green");
    $(".carte").not(draggable.find(".carte")).on("touchstart mousedown", function() {
      return flash_alert(draggable);
    });
    $(":ui-draggable").not(draggable).draggable("destroy");
    $(":ui-droppable").droppable("destroy");
    return $(".DC, .rootDrop").droppable({
      tolerance: 'touch',
      accept: function(d) {
        return d.attr("data-side") === "pioche";
      },
      activeClass: "shine-yellow",
      hoverClass: "shine-white",
      drop: function(event, ui) {
        var clone, left, parent, top;
        clone = ui.draggable.clone().attr("id", unique_id++);
        clone.find(".carte").attr("id", unique_id++);
        if ($(this).hasClass("DC")) {
          $(this).after(clone.children(":first").children(":first").removeClass("pioche"));
          $(this).remove();
          return blockOrNot(draggable);
        } else {
          clone.attr("data-side", $(this).parent().attr("data-side"));
          if (stylePower) {
            clone.attr("data-style", "true");
            parent = $(this).parent();
            $(this).remove();
            parent.children(":last").after(clone);
            update_style();
          } else {
            left = ui.helper.offset().left - $(this).offset().left;
            top = ui.helper.offset().top - $(this).offset().top;
            $(this).replaceWith(clone.css({
              top: top,
              left: left
            }));
          }
          return blockOrNot(draggable);
        }
      }
    });
  };

  unblock = function(draggable) {
    console.log("Leaving block mode...");
    if ((chapter > 3) || ((chapter > 3) && (level > 3))) {
      primeFactorPower();
    }
    if (reversePower) {
      $("body").on("click", "#pioche .carte", function() {
        return get_card($(this)).reverse();
      });
    }
    blocked = false;
    shots++;
    $("#shots").html("level " + chapter + "-" + level + "<br>" + shots + "/" + level_data.shots);
    $(".carte").not(draggable.find(".carte")).off("click mousedown");
    if (dropOnce) {
      draggable.remove();
    }
    return draggableCards();
  };

  blockOrNot = function(draggable) {
    console.log($(".DC, .rootDrop").length);
    switch ($(".DC, .rootDrop").length) {
      case 0:
        return unblock(draggable);
      default:
        return block(draggable);
    }
  };

  droppableFrac = function() {
    return $(".US").droppable({
      greedy: true,
      tolerance: "touch",
      activeClass: "shine-blue",
      hoverClass: "shine-white",
      accept: function(draggable) {
        return draggable.attr("data-side") === "pioche";
      },
      drop: function(event, ui) {
        var carte, fractions, id, numOrDen;
        console.log("droppableFrac() -> entering blockedmode");
        blocked = true;
        switch ($(this).parent().hasClass("numerateur")) {
          case true:
            numOrDen = ":first-child()";
            break;
          default:
            numOrDen = ":last-child()";
        }
        carte = ui.draggable.clone().children(":first").children(":first").removeClass("pioche").attr("id", id = unique_id++);
        $(this).replaceWith(carte);
        fractions = $(".fraction:not([data-side='pioche'])").not(carte.closest(".fraction"));
        fractions.children(numOrDen).append("<div class='carte DC' data-valeur='DC' data-style='" + stylePower + "'>&nbsp;</div>");
        return blockOrNot(ui.draggable);
      }
    });
  };

  droppableFracSimplify = function() {
    return $(".fraction .carte").not(".fraction[data-side='pioche'] .carte").droppable({
      greedy: true,
      tolerance: 'touch',
      accept: function(draggable) {
        var numeric_values, over_each_other, same_fraction, same_value, siblings;
        same_fraction = draggable.parent().parent().attr("id") === $(this).parent().parent().attr("id");
        over_each_other = draggable.parent().hasClass("denominateur") && $(this).parent().hasClass("numerateur");
        siblings = draggable.parent().is($(this).parent());
        same_value = draggable.attr("data-valeur") === $(this).attr("data-valeur");
        numeric_values = $.isNumeric(draggable.attr("data-valeur")) && $.isNumeric($(this).attr("data-valeur"));
        return same_fraction && ((over_each_other && same_value) || (siblings && numeric_values && multPower));
      },
      activeClass: "ui-state-highlight",
      hoverClass: "ui-state-hover",
      drop: function(event, ui) {
        var drag_number, drop_number, siblings;
        if (siblings = ui.draggable.parent().is($(this).parent())) {
          drag_number = parseInt(ui.draggable.attr("data-valeur"));
          drop_number = parseInt($(this).attr("data-valeur"));
          get_card($(this)).moveTo("" + (drop_number * drag_number));
        } else {
          get_card($(this)).moveTo("1");
        }
        return explosion_effect($(this).attr("id"), ui.draggable);
      }
    });
  };

  droppableFracAddition = function() {
    return $(".fraction").droppable({
      greedy: true,
      tolerance: 'touch',
      accept: function(draggable) {
        var drag, drag_number, drag_single, drop, drop_number, drop_single, onAside;
        drop_single = $(this).children(':last').is(':empty') && $(this).children(':first').children().is(':only-child');
        drag_single = draggable.children(':last').is(':empty') && draggable.children(':first').children().is(':only-child');
        onAside = draggable.parent().attr("id") === $(this).parent().attr("id");
        if (drag_single && drop_single && onAside) {
          drop = $(this).children(':first').children(':first').attr("data-valeur");
          drag = draggable.children(':first').children(':first').attr("data-valeur");
          drag_number = $.isNumeric(drag);
          drop_number = $.isNumeric(drop);
          return ((("-" + drop) === drag) || (("-" + drag) === drop)) || (addPower && drag_number && drop_number);
        }
      },
      active: "ui-state-active",
      hover: "ui-state-hover",
      drop: function(event, ui) {
        var carte, drag_number, drop_number;
        console.log("wooka");
        carte = $(this).children(':first').children(':first');
        drag_number = $.isNumeric(ui.draggable.children(':first').children(':first').attr("data-valeur"));
        drop_number = $.isNumeric(carte.attr("data-valeur"));
        if (addPower && drag_number && drop_number) {
          drag_number = parseInt(ui.draggable.children(':first').children().attr("data-valeur"));
          drop_number = parseInt(carte.attr("data-valeur"));
          get_card(carte).moveTo("" + (drop_number + drag_number));
        } else {
          get_card(carte).moveTo("0");
        }
        explosion_effect($(this).attr("id"), ui.draggable);
        if (stylePower) {
          return update_style();
        }
      }
    });
  };

  ability_to_delete_useless_card = function() {
    $("body").on("click", ".carte[data-valeur='1']:not(:only-child)", function(event, ui) {
      event.stopImmediatePropagation();
      return explosion_effect($(this).attr("id"), $(this));
    });
    return $("body").on("click", ".carte[data-valeur='0']", function(event, ui) {
      event.stopPropagation();
      if ($(this).closest(".fraction").parent().children(".fraction").length > 1) {
        explosion_effect($(this).attr("id"), $(this).closest(".fraction"));
        if (stylePower) {
          return update_style();
        }
      }
    });
  };

  primeFactorPower = function() {
    return $("body").on("click", ".green", function(event, ui) {
      var f, factors, k, len, next, prev, value;
      event.stopImmediatePropagation();
      value = $(this).attr("data-valeur");
      console.log(value);
      if (($.isNumeric(value)) && (parseInt(value) > 3)) {
        factors = primeFactorization(parseInt(value));
        for (k = 0, len = factors.length; k < len; k++) {
          f = factors[k];
          $(this).parent().append((new Card(f)).to_html());
        }
        $(this).remove();
      } else {
        if (negPower) {
          next = $(this).next(".carte");
          if ((next.length > 0) && (next.attr("data-valeur")[0] === "-")) {
            get_card(next).reverse();
            get_card($(this)).reverse();
          } else {
            prev = $(this).prev(".carte");
            if ((prev.length > 0) && (prev.attr("data-valeur")[0] === "-")) {
              get_card(prev).reverse();
              get_card($(this)).reverse();
            } else {
              $(this).before((new Card("-1")).to_html());
              get_card($(this)).reverse();
            }
          }
        }
      }
      shots++;
      $("#shots").html("level " + chapter + "-" + level + "<br>" + shots + "/" + level_data.shots);
      return draggableCards();
    });
  };

  droppableSide = function(side) {
    return $("#" + side).droppable({
      tolerance: 'touch',
      activeClass: "shine-yellow",
      hoverClass: "shine-white",
      accept: function(draggable) {
        var ref4, side_draggable;
        side_draggable = (ref4 = draggable.attr("data-side")) != null ? ref4 : "";
        switch (side_draggable) {
          case "pioche":
            return true;
          case "lhs":
          case "rhs":
            if (stylePower) {
              return crossPower && (side_draggable === opposite[side]);
            } else {
              return crossPower || (side_draggable === side);
            }
        }
      },
      drop: function(event, ui) {
        var clone, drop_pos, first, id, side_draggable, value;
        drop_pos = function(element, drop) {
          var left, top;
          if (stylePower) {
            drop.children(":last").after("<span class='bsign'>+</span>").after(element.attr("data-style", true));
            element.css({
              position: "relative",
              top: 0,
              left: 0
            });
            return update_style();
          } else {
            left = ui.helper.offset().left - drop.offset().left;
            top = ui.helper.offset().top - drop.offset().top;
            element.css({
              position: "absolute",
              top: top,
              left: left
            });
            return drop.append(element);
          }
        };
        side_draggable = ui.draggable.attr("data-side");
        console.log("droppableSide() -> side:" + side + " side_draggable:" + side_draggable);
        switch (side_draggable) {
          case "pioche":
            blocked = true;
            clone = ui.draggable.clone().attr({
              id: unique_id++,
              "data-side": side
            });
            clone.find(".carte").attr("id", unique_id++);
            drop_pos(clone, $(this));
            $("#" + opposite[side]).append("<div id='' class='carte rootDrop' data-valeur='rootDrop' data-style='" + stylePower + "'>&nbsp;</div>");
            return blockOrNot(ui.draggable);
          case "lhs":
          case "rhs":
            if (side === opposite[side_draggable]) {
              ui.draggable.attr("data-side", side);
              first = ui.draggable.find(".carte:first");
              value = first.attr("data-valeur");
              if ((value === "1") || (value === "-1") || (ui.draggable.find(".carte").length === 1)) {
                get_card(first).reverse();
              } else {
                ui.draggable.find(".numerateur:first").prepend((new Card("-1")).to_html());
                ui.draggable.find(".carte:first").attr("id", id = unique_id++);
                get_card(id).moveTo("-1");
              }
              drop_pos(ui.draggable, $(this));
              shots++;
              $("#shots").html("level " + chapter + "-" + level + "<br>" + shots + "/" + level_data.shots);
              if ($("#" + side_draggable).is(":empty")) {
                $("#" + side_draggable).append((new Fraction("0")).to_html());
              } else {
                checkSuccess();
              }
              return draggableCards();
            }
        }
      }
    });
  };

  draggableCards = function() {
    var k, len, multPowerSelector, ref4, side;
    $(".fraction[data-side='pioche']").draggable({
      containment: "#screen",
      helper: 'clone',
      revert: 'invalid',
      snap: true,
      snapMode: "inner",
      start: function(e) {
        if (!blocked) {
          if (dropdenPower) {
            $("#lhs .denominateur, #rhs .denominateur").not($(".US").parent()).append((new Card("_")).to_html());
          }
          if (dropnumPower) {
            $("#lhs .numerateur, #rhs .numerateur").not($(".US").parent()).append((new Card("_")).to_html());
          }
        }
        droppableFrac();
        return $(this).css('z-index', 2);
      },
      stop: function(e) {
        $(this).css('z-index', 1);
        return $(".US").remove();
      }
    });
    $(".fraction ").not(".fraction[data-side='pioche']").draggable({
      revert: 'invalid',
      start: function(e) {
        return $(this).css('z-index', 2);
      },
      stop: function(e) {
        return $(this).css('z-index', 1);
      }
    });
    switch (crossPower) {
      case true:
        $(".fraction ").not(".fraction[data-side='pioche']").draggable({
          containement: "document"
        });
        break;
      default:
        $(".fraction ").not(".fraction[data-side='pioche']").draggable({
          containement: "parent"
        });
    }
    multPowerSelector = multPower ? ".numerateur .carte:not(:only-child)" : "nothing";
    $(".denominateur .carte, " + multPowerSelector).not(".fraction[data-side='pioche'] .carte").draggable({
      helper: 'clone',
      revert: 'invalid',
      containment: "parent",
      start: function(e) {
        return $(this).css('z-index', 2);
      },
      stop: function(e) {
        return $(this).css('z-index', 1);
      },
      drag: function(e) {
        var atLeft, atRight, fraction, margin, maxLeft, maxTop, minLeft, minTop, over, under;
        margin = 10;
        fraction = $(this).parent().parent();
        minLeft = fraction.offset().left;
        maxLeft = minLeft + fraction.width();
        minTop = fraction.offset().top;
        maxTop = minTop + fraction.height();
        over = e.clientY < (minTop + margin);
        under = e.clientY > (maxTop + margin);
        atLeft = e.clientX < (minLeft + margin);
        atRight = e.clientX > (maxLeft + margin);
        if (over || under || atLeft || atRight) {
          e.type = 'mousedown';
          $(this).trigger('mouseup');
          return fraction.trigger(e);
        }
      }
    });
    $(".denominateur .carte").not(".fraction[data-side='pioche'] .carte").each(function() {
      var $el;
      $el = $(this);
      return $el.draggable({
        containment: $el.parent().parent()
      });
    });
    if (!won) {
      ref4 = ["lhs", "rhs"];
      for (k = 0, len = ref4.length; k < len; k++) {
        side = ref4[k];
        droppableSide(side);
      }
    }
    droppableFracSimplify();
    droppableFracAddition();
    if (stylePower) {
      return update_style();
    }
  };

  insert = function(data, sides) {
    var fraction, item, k, l, len, len1, ref4, side;
    if (sides == null) {
      sides = [];
    }
    if (data['lhs'] != null) {
      sides.push('lhs');
    }
    if (data['rhs'] != null) {
      sides.push('rhs');
    }
    if (data['pioche'] != null) {
      sides.push('pioche');
    }
    for (k = 0, len = sides.length; k < len; k++) {
      side = sides[k];
      $("#" + side).show().empty();
      ref4 = data[side];
      for (l = 0, len1 = ref4.length; l < len1; l++) {
        item = ref4[l];
        fraction = new Fraction(item);
        $("#" + side).append(fraction.to_html());
        $("#" + fraction.id).attr("data-side", side);
      }
      if ((side !== "pioche") && (!stylePower)) {
        shuffle_cards($("#" + side));
      }
    }
    if (stylePower) {
      return $("[data-style='false']").attr("data-style", "true");
    }
  };

  animation_tap = function(element, image) {
    var boucle, depart, restart;
    if (image == null) {
      image = "tap";
    }
    depart = element.offset();
    restart = function() {
      $("#astuce").show().css({
        zIndex: 1000,
        background: "url('./assets/" + image + ".gif?" + (Math.random()) + "')",
        top: depart.top - 75,
        left: depart.left - 5
      });
      return delay(1000, function() {
        return $("#astuce").fadeOut("slow");
      });
    };
    restart();
    boucle = looping(3000, function() {
      return restart();
    });
    return $("body").one("mousedown touchstart", function() {
      clearInterval(boucle);
      return $("#astuce").hide();
    });
  };

  animation_touch = function(element1, element2) {
    var boucle, clone, depart, destination, left, position, ref4, restart, top;
    depart = element1.offset();
    restart = function() {
      $("body").append(clone.show().css({
        position: "absolute",
        top: depart.top,
        left: depart.left
      }));
      $("#astuce").show().css({
        zIndex: 1000,
        background: "url('./assets/touch.gif?" + (Math.random()) + "')",
        top: depart.top - 75,
        left: depart.left - 5
      });
      return delay(1000, function() {
        $("#astuce").animate({
          top: destination.top - 75,
          left: destination.left - 5
        });
        return clone.animate({
          top: destination.top,
          left: destination.left
        }, function() {
          return $(this).fadeOut("slow", function() {
            return $("#astuce").fadeOut("slow");
          });
        });
      });
    };
    clone = element1.clone();
    switch (element2) {
      case "lhs":
      case "rhs":
        position = $("#" + element2).offset();
        ref4 = [position.top + Math.round($("#" + element2).width() / 2), position.left + Math.round($("#" + element2).height() / 2)], top = ref4[0], left = ref4[1];
        destination = {
          top: top,
          left: left
        };
        break;
      default:
        position = element2.offset();
        destination = {
          top: position.top,
          left: position.left
        };
    }
    restart();
    boucle = looping(3000, function() {
      return restart();
    });
    return $("body").one("mousedown touchstart", function() {
      clearInterval(boucle);
      $("#astuce").hide();
      return clone.remove();
    });
  };

  astuces = function() {
    switch (chapter + "-" + level) {
      case "1-1":
        return animation_tap($(".carte[data-valeur='0']").first());
      case "1-3":
        return animation_touch($(".carte[data-valeur='2']").first(), $(".carte[data-valeur='-2']").first());
      case "1-9":
        return animation_touch($(".carte[data-valeur='-g']").first(), "lhs");
      case "1-16":
        return animation_tap($("#pioche .carte[data-valeur='p']").first());
      case "2-1":
        return animation_touch($(".denominateur .carte[data-valeur='p']").first(), $(".numerateur .carte[data-valeur='p']").first());
      case "2-5":
        return animation_tap($(".carte[data-valeur='1']").first());
      case "2-11":
        return animation_touch($("#pioche .carte[data-valeur='b']").first(), $(".carte[data-valeur='_']"));
      case "3-1":
        return animation_touch($(".carte[data-valeur='t']").first(), "lhs");
      case "3-7":
        return animation_touch($("#pioche .carte[data-valeur='d']").first(), $(".carte[data-valeur='_']"));
      case "4-1":
        return animation_touch($(".carte[data-valeur='2']").first(), $(".carte[data-valeur='3']"));
      case "4-4":
        return animation_tap($(".carte[data-valeur='6']").first(), "double-tap");
      case "4-8":
        return animation_touch($(".carte[data-valeur='2']").first(), $(".carte[data-valeur='3']"));
      case "5-1":
        return animation_tap($(".carte[data-valeur='-1']").first(), "double-tap");
    }
  };

  play = function() {
    var i, k, len, ref4, ref5, ref6;
    $("button").button();
    console.log("...entering level " + level);
    toSend_reset();
    boolean_reset();
    $("#astuce, #victory-recap, #victory-anime, #pioche, #lhs, #rhs").hide();
    $("#victory-recap").fireworks("destroy");
    level_data = game_chapter[chapter].level[level];
    level_data.reveal = (ref4 = level_data.reveal) != null ? ref4 : [];
    if (indexOf.call(level_data.reveal, "all") < 0) {
      ref5 = level_data.reveal;
      for (k = 0, len = ref5.length; k < len; k++) {
        i = ref5[k];
        level_data.reveal.push("-" + i);
      }
    }
    $("#shots").html("level " + chapter + "-" + level + "<br>" + shots + "/" + level_data.shots);
    ability_to_delete_useless_card();
    if (chapter > 1) {
      dropOnce = false;
    }
    if ((chapter > 1) || ((chapter === 1) && (level > 15))) {
      reversePower = true;
    }
    if ((chapter > 1) && (level > 10) || (chapter > 2) && (!((chapter === 3) && (level === 7)))) {
      dropdenPower = true;
    }
    if (chapter > 2) {
      crossPower = true;
    }
    if ((chapter > 3) || ((chapter > 2) && (level > 6))) {
      dropnumPower = true;
    }
    if ((chapter > 3) || ((chapter > 3) && (level > 7))) {
      multPower = true;
    }
    if (chapter > 3) {
      addPower = true;
    }
    if (chapter > 4) {
      negPower = true;
    }
    if ((ref6 = chapter + "-" + level) === "2-19" || ref6 === "2-20" || ref6 === "3-17" || ref6 === "3-18" || ref6 === "3-19" || ref6 === "3-20" || ref6 === "4-17" || ref6 === "4-18" || ref6 === "4-19" || ref6 === "4-20" || ref6 === "5-17" || ref6 === "5-18" || ref6 === "5-19" || ref6 === "5-20") {
      stylePower = true;
    }
    if ((chapter > 3) || ((chapter > 3) && (level > 3))) {
      primeFactorPower();
    }
    if (reversePower) {
      $("body").on("click", "#pioche .carte", function() {
        return get_card($(this)).reverse();
      });
    }
    insert(level_data);
    draggableCards();
    return astuces();
  };

  new_power = function() {
    $("body").on("click", ".carte:not(#pioche .carte):not(.green)", function(event, ui) {
      event.stopPropagation();
      $(".carte:not(#pioche .carte)").removeClass("green");
      return $(this).addClass("green");
    });
    return $("body").on("click", function() {
      return $(".carte:not(#pioche .carte)").removeClass("green");
    });
  };

  ready = function() {
    var i, j, k, l, len, m, ref4;
    new_power();
    for (i = k = 1; k <= 5; i = ++k) {
      $("#chaptersEnd").before("<section id='chapter" + i + "' class='chapter'><h2>Chapitre " + i + "</h2></section>");
      for (j = l = 1; l <= 20; j = ++l) {
        $("#chapter" + i).append("<div class='level' id='" + i + "-" + j + "'>" + j + "</div>");
        $("#" + i + "-" + j).append("<div id='score" + i + "-" + j + "' class='score'></div>");
      }
    }
    ref4 = ["1-1", "1-3", "1-9", "1-16", "2-1", "2-5", "2-11", "3-1", "3-7", "4-1", "4-4", "4-8", "5-1"];
    for (m = 0, len = ref4.length; m < len; m++) {
      i = ref4[m];
      $("#" + i).append("<div class='new-power'></div>");
    }
    if ($("#reveal").length > 0) {
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,
        overview: false,
        minScale: 1,
        maxScale: 1,
        transition: 'concave'
      });
    }
    $("#screen").hide();
    $("#wow-dialog").dialog({
      autoOpen: false
    });
    $("#shots").button({
      icons: {
        primary: "ui-icon-gear"
      },
      text: false
    });
    $("#back").button({
      icons: {
        primary: "ui-icon-arrowreturnthick-1-n"
      },
      text: false
    });
    $("#back").on("click", function() {
      return $("#reveal,#screen").toggle();
    });
    $(".play").button({
      icons: {
        primary: " ui-icon-arrowrefresh-1-e"
      },
      text: false
    });
    $(".play").on("click", function() {
      return play();
    });
    $(".next").on("click", function() {
      return play(level++);
    });
    $(".up").on("click", function() {
      return $("#reveal,#screen").toggle();
    });
    return $(".level").on("click", function() {
      var ref5, ref6;
      ref5 = $(this).attr("id").split("-"), chapter = ref5[0], level = ref5[1];
      ref6 = [parseInt(chapter), parseInt(level)], chapter = ref6[0], level = ref6[1];
      $("#reveal,#screen").toggle();
      return play();
    });
  };

  $(document).ready(ready);

}).call(this);
