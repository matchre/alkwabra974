// Generated by CoffeeScript 1.10.0

/* 
	jQuery Mobile Boilerplate
	application.coffee
 */

(function() {
  var Card, Fraction, addPower, additionPower, block, blockOrNot, blocked, cartes, chapter, checkSuccess, crossPower, doubleNegPower, draggableCards, dropOnFrac, drop_once, dropdenPower, dropnumPower, droppableSide, flash_alert, fractionSimplify, game_chapter, get_card, insert, level, level_data, multPower, opposite, play, primeFactorPower, primeFactorization, primePower, reversePower, shuffle_cards, stylePower, unblock, unique_id, update_style, zoom,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  game_chapter = {
    1: {
      level: {
        1: {
          lhs: ["x", "0", "0"]
        },
        2: {
          lhs: ["x", "0", "0", "0"]
        },
        3: {
          lhs: ["x", "2", "-2", "t", "-t"]
        },
        4: {
          lhs: ["x", "4", "-4", "p", "-p"]
        },
        5: {
          lhs: ["p"],
          rhs: ["x", "g", "-g", "t", "-t"]
        },
        6: {
          lhs: ["x", "s", "-s"],
          rhs: ["0", "s", "r"]
        },
        7: {
          lhs: ["5", "-5", "g", "r"],
          rhs: ["x", "0"]
        },
        8: {
          lhs: ["x", "p", "-p", "0"],
          rhs: ["r", "d", "s", "-s", "0"]
        },
        9: {
          lhs: ["x", "g"],
          rhs: ["s"],
          pioche: ["-g"]
        },
        10: {
          lhs: ["t", "-m"],
          rhs: ["x", "-m"],
          pioche: ["m"]
        },
        11: {
          lhs: ["t", "-w"],
          rhs: ["x", "t"],
          pioche: ["-p", "-t", "-s", "6", "b", "m", "d", "g"]
        },
        12: {
          lhs: ["x", "-r", "d"],
          rhs: ["p", "0"],
          pioche: ["-w", "-t", "-d", "-g", "b", "r", "p", "s"]
        },
        13: {
          lhs: ["x", "a"],
          rhs: ["p"],
          pioche: ["-a"],
          reveal: ["a", "-a"]
        },
        14: {
          lhs: ["p", "r"],
          rhs: ["d", "x", "c", "-c"],
          pioche: ["-d", "-p", "-r"],
          reveal: ["c", "-c"]
        },
        15: {
          lhs: ["d", "b", "p", "-d"],
          rhs: ["p", "x", "c"],
          pioche: ["-p", "-c", "-d"],
          reveal: ["c", "-c"]
        },
        16: {
          lhs: ["t"],
          rhs: ["p", "x"],
          pioche: ["p"]
        },
        17: {
          lhs: ["g", "t", "r"],
          rhs: ["r", "x", "g", "p"],
          pioche: ["p", "r", "g"]
        },
        18: {
          lhs: ["x", "c", "-p", "p", "t"],
          rhs: ["m"],
          pioche: ["t", "c", "m"],
          reveal: ["c"]
        },
        19: {
          lhs: ["x", "-t", "m"],
          rhs: ["s", "-s", "d", "-t"],
          pioche: ["m", "t"],
          reveal: ["x"]
        },
        20: {
          lhs: ["x", "-b", "c"],
          rhs: ["c", "t", "-b"],
          pioche: ["b", "p", "c", "t"],
          reveal: ["x", "c"]
        }
      }
    },
    2: {
      level: {
        1: {
          lhs: ["x", "-1", "p/p"],
          rhs: ["-g"]
        },
        2: {
          lhs: ["b/-b", "t/t", "d"],
          rhs: ["-1", "-1", "t/t", "a/a", "x"],
          reveal: ["a"]
        },
        3: {
          lhs: ["1", "t"],
          rhs: ["-x/-x", "x", "x/x"],
          pioche: ["1"]
        },
        4: {
          lhs: ["-1", "c", "d", "x", "-d", "-s/-s"],
          rhs: ["-g"],
          pioche: ["1", "c", "2", "s"],
          reveal: ["c", "d", "-d"]
        },
        5: {
          lhs: ["x.1"],
          rhs: ["m"]
        },
        6: {
          lhs: ["1.x.1"],
          rhs: ["b", "p.t/t", "-p.r/r"]
        },
        7: {
          lhs: ["m.x/m"],
          rhs: ["s", "1.1.1.-d", "1.1.d.1.1"]
        },
        8: {
          lhs: ["t", "m"],
          rhs: ["x.3/3", "t"],
          pioche: ["t"]
        },
        9: {
          lhs: ["r.b/b", "x"],
          rhs: ["1/b", "r", "-p/p", "p/p"],
          pioche: ["r"]
        },
        10: {
          lhs: ["x", "-c.-t/-t", "b.s.4.c.-b/-b.4.s.b"],
          rhs: ["p"],
          reveal: ["c", "-c"]
        },
        11: {
          lhs: ["b.x"],
          rhs: ["m", "g"],
          pioche: ["b"]
        },
        12: {
          lhs: ["p.x"],
          rhs: ["2", "-2", "b"],
          pioche: ["p"]
        },
        13: {
          lhs: ["m"],
          rhs: ["-1", "x.-4.t", "1"],
          pioche: ["t", "4"]
        },
        14: {
          lhs: ["-s.x"],
          rhs: ["-s/-s", "b"],
          pioche: ["s"]
        },
        15: {
          lhs: ["b", "-1", "t/t"],
          rhs: ["z.x"],
          pioche: ["z"]
        },
        16: {
          lhs: ["t"],
          rhs: ["-b.x", "m", "-m", "-r"],
          pioche: ["r", "b"]
        },
        17: {
          lhs: ["r", "m.x"],
          rhs: ["t"],
          pioche: ["m", "r"]
        },
        18: {
          lhs: ["0", "s.x"],
          rhs: ["3", "d/d", "-1"],
          pioche: ["3", "d", "s", "1"],
          reveal: ["x"]
        },
        19: {
          lhs: ["r", "0"],
          rhs: ["x.6", "t", "0"],
          pioche: ["6", "t"],
          reveal: ["x"]
        },
        20: {
          lhs: ["x.-f.-d", "m"],
          rhs: ["1", "g", "0"],
          pioche: ["d", "m", "f"],
          reveal: ["x", "-f", "f"]
        }
      }
    },
    3: {
      level: {
        1: {
          lhs: ["p"],
          rhs: ["t", "x"]
        },
        2: {
          lhs: ["x", "b", "m", "r"],
          rhs: ["b", "g", "m", "r"]
        },
        3: {
          lhs: ["x", "s", "-s", "m/k", "t"],
          rhs: ["g", "t"]
        },
        4: {
          lhs: ["h"],
          rhs: ["x.s", "b"],
          pioche: ["s"]
        },
        5: {
          lhs: ["x.-g", "p", "-p", "r"],
          rhs: ["r", "b"],
          pioche: ["r", "g"]
        },
        6: {
          lhs: ["p", "m"],
          rhs: ["3/r", "p", "-x"]
        },
        7: {
          lhs: ["x/d"],
          rhs: ["m", "g"],
          pioche: ["d"]
        },
        8: {
          lhs: ["1"],
          rhs: ["-b", "b", "m", "x/t"],
          pioche: ["t", "b", "m"]
        },
        9: {
          lhs: ["x/-m.g", "-l"],
          rhs: ["1/g", "d/d", "-1", "-l"],
          pioche: ["m", "g", "1"]
        },
        10: {
          lhs: ["1.m.c", "-s/t", "s/t"],
          rhs: ["c.x.-r/t"],
          pioche: ["s", "r", "c", "t"]
        },
        11: {
          lhs: ["t/x"],
          rhs: ["1"],
          pioche: ["x"]
        },
        12: {
          lhs: ["r"],
          rhs: ["-p/x.t"],
          pioche: ["x", "r", "t", "p"]
        },
        13: {
          lhs: ["1"],
          rhs: ["d/x", "-1/x"],
          pioche: ["x"]
        },
        14: {
          lhs: ["j/x", "1/x"],
          rhs: ["h", "j/x"],
          pioche: ["j", "h", "x"]
        },
        15: {
          lhs: ["x.-r/b", "s"],
          rhs: ["2.-r", "s"],
          pioche: ["x", "b", "2", "s", "-r"],
          reveal: ["x", "b", "-x", "-b"]
        },
        16: {
          lhs: ["a.x", "b"],
          rhs: ["d"],
          pioche: ["x", "a", "b", "d"],
          reveal: ["x", "a", "b", "d", "-x", "-a", "-b", "-d"]
        },
        17: {
          lhs: ["b", "q"],
          rhs: ["a/x", "q"],
          pioche: ["x", "b", "q"],
          reveal: ["x", "b", "-x", "-b"]
        },
        18: {
          lhs: ["j", "3"],
          rhs: ["g.x/i", "d/i", "3"],
          pioche: ["g", "i", "j", "d", "3"],
          reveal: ["x", "g", "i", "j", "d", "3", "-3", "0", "1", "-1", "-x", "-g", "-i", "-j", "-d"]
        },
        19: {
          lhs: ["x/c.b", "2/c"],
          rhs: ["d", "2/c"],
          pioche: ["c", "d", "b", "2"],
          reveal: ["c", "d", "b", "2", "-c", "-d", "-b", "-2", "0", "1", "-1"]
        },
        20: {
          lhs: ["4", "f"],
          rhs: ["c/x", "4"],
          pioche: ["f", "c", "x", "4"],
          reveal: ["f", "c", "x", "4", "-f", "-c", "-x", "-4", "0", "1", "-1"]
        }
      }
    },
    4: {
      level: {
        1: {
          lhs: ["x", "2", "3"],
          rhs: ["b"]
        },
        2: {
          lhs: ["4", "r.s"],
          rhs: ["3", "x.m", "1"],
          pioche: ["m", "4"]
        },
        3: {
          lhs: ["x/l", "3", "2"],
          rhs: ["6"],
          pioche: ["2", "3", "6", "l"]
        },
        4: {
          lhs: ["x.6/2.3"],
          rhs: ["b"]
        },
        5: {
          lhs: ["x.2/6"],
          rhs: ["s"],
          pioche: ["3"]
        },
        6: {
          lhs: ["x.4/2"],
          rhs: ["g.6/3"],
          pioche: ["2"]
        },
        7: {
          lhs: ["t"],
          rhs: ["2/4", "x/2"],
          pioche: ["2", "1"]
        },
        8: {
          lhs: ["x.2.3/6"],
          rhs: ["h"]
        },
        9: {
          lhs: ["x.3.2"],
          rhs: ["m.3.2"],
          pioche: ["6"]
        },
        10: {
          lhs: ["x/2.3", "g/6"],
          rhs: ["t"],
          pioche: ["6"]
        },
        11: {
          lhs: ["2.3", "b"],
          rhs: ["3", "3", "6/x"],
          pioche: ["6", "x", "b"]
        },
        12: {
          lhs: ["x.2.3"],
          rhs: ["p.6"],
          pioche: ["6"],
          reveal: ["0", "1", "2", "3", "6"]
        },
        13: {
          lhs: ["x/2", "1/4"],
          rhs: ["s"],
          pioche: ["1", "2", "4"],
          reveal: ["1", "2", "4", "-1", "-2", "-4"]
        },
        14: {
          lhs: ["x.6/2"],
          rhs: ["e"],
          pioche: ["3"],
          reveal: ["all"]
        },
        15: {
          lhs: ["a", "6", "d", "-1"],
          rhs: ["3", "x/b", "2"],
          pioche: ["a", "b"],
          reveal: ["a", "b", "x", "numbers"]
        },
        16: {
          lhs: ["x.a.3/6", "1"],
          rhs: ["j.2/8", "1"],
          pioche: ["2", "a"],
          reveal: ["a", "x", "numbers"]
        },
        17: {
          lhs: ["6", "a"],
          rhs: ["x.d", "3"],
          pioche: ["3", "d"],
          reveal: ["all"]
        },
        18: {
          lhs: ["c/x", "3"],
          rhs: ["4"],
          pioche: ["3", "1", "4", "x"],
          reveal: ["all"]
        },
        19: {
          lhs: ["g.x/d.x.h", "4.2"],
          rhs: ["7", "x.b/d"],
          pioche: ["b", "d", "h"],
          reveal: ["all"]
        },
        20: {
          lhs: ["x.d.3/2", "e.x.x"],
          rhs: ["b.x"],
          pioche: ["x", "e", "b", "d"],
          reveal: ["all"]
        }
      }
    },
    5: {
      level: {
        1: {
          lhs: ["-1.-x"],
          rhs: ["t"]
        },
        2: {
          lhs: ["x.-t.-r/t.r"],
          rhs: ["m"]
        },
        3: {
          lhs: ["t"],
          rhs: ["x.b.-r/r.-b"]
        }
      }
    }
  };

  chapter = 5;

  level = 3;

  level_data = {};

  unique_id = 1;

  zoom = 100;

  blocked = false;

  drop_once = true;

  reversePower = false;

  dropdenPower = false;

  dropnumPower = false;

  stylePower = false;

  crossPower = false;

  addPower = false;

  primePower = false;

  multPower = false;

  doubleNegPower = false;

  cartes = {};

  opposite = {
    lhs: "rhs",
    rhs: "lhs"
  };

  get_card = function(cardOrId) {
    var card;
    if ($.isNumeric(cardOrId)) {
      card = new Card($("#" + cardOrId).attr("data-valeur"));
      card.id = $("#" + cardOrId).attr("id");
    } else {
      card = new Card(cardOrId.attr("data-valeur"));
      card.id = cardOrId.attr("id");
    }
    return card;
  };

  Card = (function() {
    function Card(string1) {
      this.string = string1;
      this.id = unique_id++;
    }

    Card.prototype.to_html = function() {
      var ref;
      if ((indexOf.call(level_data.reveal, "all") >= 0) || (ref = this.string, indexOf.call(level_data.reveal, ref) >= 0) || ($.isNumeric(this.string) && (indexOf.call(level_data.reveal, "numbers") >= 0))) {
        return "<div id='" + this.id + "' class='carte' data-valeur='" + this.string + "' data-style='" + stylePower + "' style='background-image : none;'>" + this.string + "</div>";
      } else {
        return "<div id='" + this.id + "' class='carte' data-valeur='" + this.string + "' data-style='" + stylePower + "' style='background-image : url(./images/cartes/" + this.string + ".png);'>&nbsp;</div>";
      }
    };

    Card.prototype.moveTo = function(string1) {
      this.string = string1;
      console.log("moveTo", this.string);
      $("#" + this.id).replaceWith(this.to_html());
      return draggableCards();
    };

    Card.prototype.reverse = function() {
      console.log("reverse", this.string);
      switch (this.string[0]) {
        case "0":
          this.string = this.string;
          break;
        case "-":
          this.string = this.string.slice(1);
          break;
        default:
          this.string = "-" + this.string;
      }
      return this.moveTo(this.string);
    };

    return Card;

  })();

  Fraction = (function() {
    function Fraction(string) {
      var fraction_split;
      this.id = unique_id++;
      fraction_split = string.split("/");
      this.numerateur = fraction_split[0].split(".");
      this.denominateur = fraction_split[1] != null ? fraction_split[1].split(".") : [];
    }

    Fraction.prototype.to_html = function() {
      var d, fraction, i, k, l, len, len1, n, ref, ref1, ref2;
      ref = ["", ""], n = ref[0], d = ref[1];
      ref1 = this.numerateur;
      for (k = 0, len = ref1.length; k < len; k++) {
        i = ref1[k];
        n += (new Card(i)).to_html();
      }
      ref2 = this.denominateur;
      for (l = 0, len1 = ref2.length; l < len1; l++) {
        i = ref2[l];
        d += (new Card(i)).to_html();
      }
      return fraction = "<div id='" + this.id + "' class='fraction' data-style='" + stylePower + "'>\n    <div id='numerateur_" + this.id + "' class='numerateur' data-style='" + stylePower + "'>" + n + "</div>\n    <div id='denominateur_" + this.id + "' class='denominateur' data-style='" + stylePower + "'>" + d + "</div>\n</div>";
    };

    return Fraction;

  })();

  primeFactorization = function(num) {
    var result, root, x;
    root = Math.sqrt(num);
    result = arguments[1] || [];
    x = 2;
    if (num % x) {
      x = 3;
      while (num % x && (x = x + 2) < root) {
        continue;
      }
    }
    x = x <= root ? x : num;
    result.push(x);
    if (x === num) {
      return result;
    } else {
      return primeFactorization(num / x, result);
    }
  };

  shuffle_cards = function(container) {
    var calc_overlap, filled_areas, maxSearchIterations, max_x, max_y, min_x, min_y, randomize;
    console.log("let's shuffle cards in " + (container.attr('id')));
    maxSearchIterations = 20;
    min_x = container.position().left;
    max_x = min_x + container.width() - $(".fraction").first().width();
    min_y = container.position().top;
    max_y = min_y + container.height() - $(".fraction").first().height();
    filled_areas = [];
    calc_overlap = function(a1) {
      var a2, i, intersection, overlap, ref, x1, x2, y1, y2;
      ref = [0, 0], overlap = ref[0], i = ref[1];
      while (i < filled_areas.length) {
        a2 = filled_areas[i];
        if (!((a1.x + a1.width < a2.x) || (a2.x + a2.width < a1.x) || (a1.y + a1.height < a2.y) || (a2.y + a2.height < a1.y))) {
          x1 = Math.max(a1.x, a2.x);
          y1 = Math.max(a1.y, a2.y);
          x2 = Math.min(a1.x + a1.width, a2.x + a2.width);
          y2 = Math.min(a1.y + a1.height, a2.y + a2.height);
          intersection = (x1 - x2) * (y1 - y2);
          overlap += intersection;
        }
        i++;
      }
      return overlap;
    };
    randomize = function(container) {
      filled_areas.splice(0, filled_areas.length);
      filled_areas.splice(0, filled_areas.length);
      return container.children(".fraction").each(function() {
        var area, best_choice, i, overlap, rand_x, rand_y, ref, ref1, smallest_overlap;
        ref = [0, 9007199254740992], i = ref[0], smallest_overlap = ref[1];
        while (i++ < maxSearchIterations) {
          rand_x = Math.round((max_x - min_x) * Math.random());
          rand_y = Math.round((max_y - min_y) * Math.random());
          area = {
            x: rand_x,
            y: rand_y,
            width: $(this).width(),
            height: $(this).height()
          };
          overlap = calc_overlap(area);
          if (overlap < smallest_overlap) {
            ref1 = [overlap, area], smallest_overlap = ref1[0], best_choice = ref1[1];
          }
          if (overlap === 0) {
            break;
          }
        }
        filled_areas.push(best_choice);
        $(this).css({
          position: "absolute"
        }).animate({
          left: rand_x,
          top: rand_y
        });
        return console.log("and " + ($(this).attr('data-valeur')) + " is at (" + rand_x + "," + rand_y + ")");
      });
    };
    return randomize(container);
  };

  update_style = function() {
    $(".bsign").remove();
    return $("#lhs .fraction:not(:first-child), #rhs .fraction:not(:first-child)").before("<span class='bsign'>+</span>");
  };

  checkSuccess = function() {
    var x;
    console.log("check success...");
    x = $(".carte[data-valeur='x']").not("[data-side='pioche'] .carte");
    if (x.length === 1) {
      if (x.parent().parent().parent().find(".carte").length === 1) {
        $(".astuce").hide();
        if (level === 20) {
          $("#feedback").html("Essaye un nouveau chapitre");
          $(".next").hide();
          $(".up").show();
          return $("#victory-recap").show();
        } else {
          console.log("woho" + level);
          $("#feedback").html("Essaye le suivant...");
          $(".next,.up").show();
          return $("#victory-recap").show();
        }
      }
    }
  };

  flash_alert = function(element) {
    $("#wow_dialog").dialog("close");
    $("#wow_dialog").dialog({
      width: '50px',
      height: 100,
      show: {
        effect: "blind",
        duration: 100
      },
      position: {
        my: "center bottom",
        at: "center top",
        of: element
      },
      open: function(event, ui) {
        return setTimeout("$('#wow_dialog').dialog('close')", 1000);
      }
    });
    return $("#wow_dialog").dialog("open");
  };

  block = function(draggable) {
    console.log("Entering block mode...");
    $("#pioche .carte ").off("click");
    $(".fraction, .pioche, .carte").not(draggable).not(draggable.find(".carte")).on("mousedown", function() {
      return flash_alert(draggable);
    });
    $(":ui-draggable").not(draggable).draggable("destroy");
    $(":ui-droppable").droppable("destroy");
    $(".DC").droppable({
      tolerance: 'touch',
      accept: function(d) {
        return d.attr("data-side") === "pioche";
      },
      activeClass: "ui-state-active",
      hoverClass: "ui-state-hover",
      drop: function(event, ui) {
        $(this).after(ui.helper.clone().children(":first").children(":first").css({
          position: "relative"
        }).removeClass("pioche").attr("id", unique_id++));
        $(this).remove();
        return blockOrNot(draggable);
      }
    });
    return $(".DF").droppable({
      tolerance: 'touch',
      accept: function(d) {
        return d.attr("data-side") === "pioche";
      },
      activeClass: "ui-state-active",
      hoverClass: "ui-state-hover",
      drop: function(event, ui) {
        var clone, drop_pos, parent, pos;
        drop_pos = function(drag, drop) {
          var left, top;
          left = drag.offset().left - drop.offset().left;
          top = drag.offset().top - drop.offset().top;
          return {
            top: top,
            left: left
          };
        };
        clone = ui.helper.clone();
        clone.attr("id", unique_id++).attr("data-side", $(this).parent().attr("data-side"));
        if (stylePower) {
          clone.css({
            position: "relative",
            display: "inline-block",
            top: 0,
            left: 0
          }).attr("data-style", "true");
          parent = $(this).parent();
          $(this).remove();
          parent.children(":last").after(clone);
          update_style();
        } else {
          pos = drop_pos(ui.helper, $(this));
          clone.css({
            position: "absolute",
            top: pos.top,
            left: pos.left
          });
          $(this).append(clone);
          clone.unwrap();
        }
        console.log("clone_id : ", clone.attr("id"));
        return blockOrNot(draggable);
      }
    });
  };

  unblock = function(draggable) {
    console.log("Leaving block mode...");
    blocked = false;
    $(".fraction, .pioche, .carte").not(draggable).not(draggable.find(".carte")).off("mousedown");
    if (drop_once) {
      draggable.remove();
    }
    return draggableCards();
  };

  blockOrNot = function(draggable) {
    switch ($(".DC, .DF").length) {
      case 0:
        return unblock(draggable);
      default:
        return block(draggable);
    }
  };

  dropOnFrac = function(numOrDen) {
    return $("." + numOrDen).not(".fraction[data-side='pioche'] ." + numOrDen).droppable({
      greedy: true,
      tolerance: "touch",
      activeClass: "active-" + numOrDen,
      hoverClass: "hover-" + numOrDen,
      accept: function(draggable) {
        return draggable.attr("data-side") === "pioche";
      },
      drop: function(event, ui) {
        if (!blocked) {
          blocked = true;
          $(this).append(ui.helper.clone().children(":first").children(":first").removeClass("pioche").attr("id", unique_id++));
          switch (numOrDen) {
            case "numerateur":
              $(".fraction").not("[data-side='pioche']").not($(this).parent()).children(":first-child()").append(cartes["DC"]);
              break;
            default:
              $(".fraction").not("[data-side='pioche']").not($(this).parent()).children(":last-child()").append(cartes["DC"]);
          }
          return blockOrNot(ui.draggable);
        }
      }
    });
  };

  fractionSimplify = function() {
    return $(".fraction .carte").not(".fraction[data-side='pioche'] .carte").droppable({
      greedy: true,
      tolerance: 'touch',
      accept: function(draggable) {
        var numeric_values, over_each_other, same_fraction, same_value, siblings;
        same_fraction = draggable.parent().parent().attr("id") === $(this).parent().parent().attr("id");
        over_each_other = draggable.parent().hasClass("denominateur") && $(this).parent().hasClass("numerateur");
        siblings = draggable.parent().is($(this).parent());
        same_value = draggable.attr("data-valeur") === $(this).attr("data-valeur");
        numeric_values = $.isNumeric(draggable.attr("data-valeur")) && $.isNumeric($(this).attr("data-valeur"));
        return same_fraction && ((over_each_other && same_value) || (siblings && numeric_values && multPower));
      },
      activeClass: "ui-state-highlight",
      hoverClass: "ui-state-hover",
      drop: function(event, ui) {
        var drag_number, drop_number, siblings;
        siblings = ui.draggable.parent().is($(this).parent());
        console.log(siblings);
        if (siblings) {
          drag_number = parseInt(ui.draggable.attr("data-valeur"));
          drop_number = parseInt($(this).attr("data-valeur"));
          ui.draggable.remove();
          return get_card($(this)).moveTo("" + (drop_number * drag_number));
        } else {
          ui.draggable.remove();
          return get_card($(this)).moveTo("1");
        }
      }
    });
  };

  additionPower = function() {
    return $(".fraction").droppable({
      greedy: true,
      tolerance: 'touch',
      accept: function(draggable) {
        var drag, drag_number, drop, drop_number, onAside;
        drop = $(this).children(':last').is(':empty') && $(this).children(':first').children().is(':only-child');
        drag = draggable.children(':last').is(':empty') && draggable.children(':first').children().is(':only-child');
        onAside = draggable.parent().attr("id") === $(this).parent().attr("id");
        if (drag && drop && onAside) {
          drop = $(this).children(':first').children(':first').attr("data-valeur");
          drag = draggable.children(':first').children(':first').attr("data-valeur");
          drag_number = $.isNumeric(drag);
          drop_number = $.isNumeric(drop);
          console.log(drop, drag);
          return ((("-" + drop) === drag) || (("-" + drag) === drop)) || (addPower && drag_number && drop_number);
        }
      },
      active: "ui-state-active",
      hover: "ui-state-hover",
      drop: function(event, ui) {
        var drag, drag_number, drop, drop_number;
        drop = $(this).children(':first').children(':first').attr("data-valeur");
        drag = ui.draggable.children(':first').children(':first').attr("data-valeur");
        drag_number = $.isNumeric(drag);
        drop_number = $.isNumeric(drop);
        if (addPower && drag_number && drop_number) {
          drag_number = parseInt(ui.draggable.children(':first').children().attr("data-valeur"));
          drop_number = parseInt($(this).children(':first').children().attr("data-valeur"));
          console.log("boozoo" + drag_number + " " + drop_number);
          $(this).children(':first').children(":first").removeClass("ui-state-active ui-state-hover");
          ui.draggable.remove();
          get_card($(this).children(':first').children(':first')).moveTo("" + (drop_number + drag_number));
          if (stylePower) {
            return update_style();
          }
        } else {
          $(this).children(':first').children(":first").removeClass("ui-state-active ui-state-hover");
          ui.draggable.remove();
          return get_card($(this).children(':first').children(':first')).moveTo("0");
        }
      }
    });
  };

  primeFactorPower = function() {
    return $(".fraction .carte").not(".fraction[data-side='pioche']").on("dblclick", function() {
      var card, f, factors, k, len, value;
      value = $(this).attr("data-valeur");
      console.log("primeFactorPower :", value);
      if ($.isNumeric(value) && value > 0) {
        factors = primeFactorization(value);
        for (k = 0, len = factors.length; k < len; k++) {
          f = factors[k];
          $(this).parent().append((new Card(f)).to_html());
        }
        $(this).remove();
        return draggableCards();
      } else if (doubleNegPower && $(this).siblings(".carte").length) {
        card = get_card($(this));
        card.reverse();
        if ($("#" + card.id).next(".carte").length) {
          return get_card($("#" + card.id).next(".carte")).reverse();
        } else {
          return get_card($("#" + card.id).prev(".carte")).reverse();
        }
      }
    });
  };

  droppableSide = function(side) {
    return $("#" + side).droppable({
      tolerance: 'touch',
      accept: function(draggable) {
        var ref, side_draggable;
        side_draggable = (ref = draggable.attr("data-side")) != null ? ref : "";
        switch (side_draggable) {
          case "pioche":
            return true;
          case "lhs":
          case "rhs":
            if (stylePower) {
              return crossPower && (side_draggable === opposite[side]);
            } else {
              return crossPower || (side_draggable === side);
            }
        }
      },
      drop: function(event, ui) {
        var clone, drop_pos, first, id, side_draggable, value;
        drop_pos = function(element, drop) {
          var left, top;
          if (stylePower) {
            element.css({
              position: "relative",
              display: "inline-block",
              top: 0,
              left: 0
            }).attr("data-style", true);
            drop.children(":last").after("<span class='bsign'>+</span>");
            drop.children(":last").after(element);
            return update_style();
          } else {
            left = ui.helper.offset().left - drop.offset().left;
            top = ui.helper.offset().top - drop.offset().top;
            element.css({
              position: "absolute",
              top: top,
              left: left
            });
            return drop.append(element);
          }
        };
        side_draggable = ui.draggable.attr("data-side");
        switch (side_draggable) {
          case "pioche":
            clone = ui.helper.clone();
            clone.attr("id", unique_id++).attr("data-side", side).find(".carte").attr("id", unique_id++);
            drop_pos(clone, $(this));
            $("#" + opposite[side]).append(cartes["DF"]);
            $("#" + opposite[side] + " .DF").css({
              position: "absolute",
              top: '0',
              left: '0'
            });
            return blockOrNot(ui.draggable);
          case "lhs":
          case "rhs":
            if (side === opposite[side_draggable]) {
              ui.draggable.attr("data-side", side);
              first = ui.draggable.find(".carte:first");
              value = first.attr("data-valeur");
              if ((value === "1") || (value === "-1") || (ui.draggable.find(".carte").length === 1)) {
                get_card(first).reverse();
              } else {
                ui.draggable.find(".numerateur:first").prepend((new Card("-1")).to_html());
                ui.draggable.find(".carte:first").attr("id", id = unique_id++);
                get_card(id).moveTo("-1");
              }
              drop_pos(ui.draggable, $(this));
              if ($("#" + side_draggable).is(":empty")) {
                $("#" + side_draggable).append((new Fraction("0")).to_html());
              } else {
                checkSuccess();
              }
              return draggableCards();
            }
        }
      }
    });
  };

  draggableCards = function() {
    $(".fraction[data-side='pioche']").draggable({
      containment: "#screen",
      helper: 'clone',
      revert: 'invalid',
      start: function(e) {
        $("#lhs .denominateur:empty, #rhs .denominateur:empty").append("<div class='tidbit'></div>");
        return $(this).css('z-index', 1);
      },
      stop: function(e) {
        $(this).css('z-index', 0);
        return $(".tidbit").remove();
      }
    });
    $(".fraction ").not(".fraction[data-side='pioche']").draggable({
      revert: 'invalid',
      start: function(e) {
        return $(this).css('z-index', 1);
      },
      stop: function(e) {
        return $(this).css('z-index', 0);
      }
    }).on("click", function() {
      var carte;
      if ($(this).children(':last').is(':empty') && $(this).children(':first').children().is(':only-child')) {
        carte = $(this).children(':first').children(':first');
        if ($.isNumeric(carte.attr("data-valeur"))) {
          switch (parseInt(carte.attr("data-valeur"))) {
            case 0:
              $(this).remove();
              if (stylePower) {
                update_style();
              }
              return checkSuccess();
          }
        }
      }
    });
    switch (crossPower) {
      case true:
        $(".fraction ").not(".fraction[data-side='pioche']").draggable({
          containement: "document"
        });
        break;
      default:
        $(".fraction ").not(".fraction[data-side='pioche']").draggable({
          containement: "parent"
        });
    }
    $(".denominateur .carte").not(".fraction[data-side='pioche'] .carte").draggable({
      helper: 'clone',
      revert: 'invalid',
      containment: function(e) {
        return $(this).parent().parent();
      },
      start: function(e) {
        return $(this).css('z-index', 1);
      },
      stop: function(e) {
        return $(this).css('z-index', 0);
      }
    });
    $(".denominateur .carte").not(".fraction[data-side='pioche'] .carte").each(function() {
      var $el;
      $el = $(this);
      return $el.draggable({
        containment: $el.parent().parent()
      });
    });
    if (multPower) {
      $(".numerateur .carte:not(:only-child)").not(".fraction[data-side='pioche'] .carte").draggable({
        helper: 'clone',
        revert: 'invalid',
        containment: "parent",
        start: function(e) {
          return $(this).css('z-index', 1);
        },
        stop: function(e) {
          return $(this).css('z-index', 0);
        }
      });
    }
    $(".carte[data-valeur='1']:not(:only-child)").not(".fraction[data-side='pioche'] .carte").on("click", function() {
      if (!$(this).is(":only-child")) {
        $(this).remove();
        return checkSuccess();
      }
    });
    droppableSide("lhs");
    droppableSide("rhs");
    fractionSimplify();
    if (reversePower) {
      $("#pioche .carte").on("click", function() {
        return get_card($(this)).reverse();
      });
    }
    if (dropdenPower) {
      dropOnFrac("denominateur");
    }
    if (dropnumPower) {
      dropOnFrac("numerateur");
    }
    additionPower();
    if (primePower) {
      primeFactorPower();
    }
    if (stylePower) {
      return update_style();
    }
  };

  insert = function(data, sides) {
    var fraction, item, k, l, len, len1, ref, side;
    if (sides == null) {
      sides = [];
    }
    if (data['lhs'] != null) {
      sides.push('lhs');
    }
    if (data['rhs'] != null) {
      sides.push('rhs');
    }
    if (data['pioche'] != null) {
      sides.push('pioche');
    }
    for (k = 0, len = sides.length; k < len; k++) {
      side = sides[k];
      $("#" + side).show().empty();
      ref = data[side];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        item = ref[l];
        fraction = new Fraction(item);
        $("#" + side).append(fraction.to_html());
        $("#" + fraction.id).attr("data-side", side);
      }
      if ((side !== "pioche") && (!stylePower)) {
        shuffle_cards($("#" + side));
      }
    }
    if (stylePower) {
      $("[data-style='false']").attr("data-style", "true");
    }
    cartes["DF"] = "<li id='' class='carte DF' data-valeur='DF' data-style='" + stylePower + "'>&nbsp;</li>";
    return cartes["DC"] = "<li id='' class='carte DC' data-valeur='DC' data-style='" + stylePower + "'>&nbsp;</li>";
  };

  play = function() {
    var i, k, len, ref, ref1, ref2;
    console.log("...entering level " + level);
    $(".astuce, #victory-recap").hide();
    $("#level_info").html(chapter + "-" + level);
    $("#pioche, #lhs, #rhs").hide();
    if (chapter > 1) {
      drop_once = false;
    }
    if ((level > 15) || (chapter > 1)) {
      reversePower = true;
    }
    if ((chapter > 1) && (level > 10) || (chapter > 2)) {
      dropdenPower = true;
    }
    if ((chapter > 2) && (level > 6) || (chapter > 3)) {
      dropnumPower = true;
    }
    if (chapter > 2) {
      crossPower = true;
    }
    if (chapter > 3) {
      addPower = true;
    }
    primePower = true;
    multPower = true;
    doubleNegPower = true;
    switch (chapter + "-" + level) {
      case "2-19":
      case "2-20":
      case "3-17":
      case "3-18":
      case "3-19":
      case "3-20":
      case "4-17":
      case "4-18":
      case "4-19":
      case "4-20":
        stylePower = true;
        break;
      default:
        stylePower = false;
    }
    level_data = game_chapter[chapter].level[level];
    level_data.reveal = (ref = level_data.reveal) != null ? ref : [];
    if (indexOf.call(level_data.reveal, "all") < 0) {
      ref1 = level_data.reveal;
      for (k = 0, len = ref1.length; k < len; k++) {
        i = ref1[k];
        level_data.reveal.push("-" + i);
      }
    }
    insert(level_data);
    draggableCards();
    if ((ref2 = chapter + "-" + level) === "1-1" || ref2 === "1-3" || ref2 === "1-9" || ref2 === "1-16" || ref2 === "2-1" || ref2 === "2-5" || ref2 === "2-11" || ref2 === "3-1" || ref2 === "3-7" || ref2 === "4-1" || ref2 === "4-4" || ref2 === "5-1") {
      console.log("#astuce_" + chapter + "-" + level);
      return $("#astuce-" + chapter + "-" + level).show();
    }
  };

  $(function() {
    var i, j, k, l, len, m, ref, resize;
    $(".dialog").dialog({
      autoOpen: false
    });
    $(".astuce").draggable().append("<div class='close'></div>");
    $("#screen").toggle();
    for (i = k = 1; k <= 5; i = ++k) {
      $("#chaptersEnd").before("<section id='chapter" + i + "' class='chapter'><h2>Chapitre " + i + "</h2></section>");
      for (j = l = 1; l <= 20; j = ++l) {
        $("#chapter" + i).append("<div class='level' id='" + i + "-" + j + "'>" + j + "</div>");
      }
      $("#chapter" + i).css({
        background: "url('./images/chapters/chapter1.jpg') 100% 100% no-repeat"
      });
    }
    ref = ["1-1", "1-3", "1-9", "1-16", "2-1", "2-5", "2-11", "3-1", "3-7", "4-1", "4-4", "5-1"];
    for (m = 0, len = ref.length; m < len; m++) {
      i = ref[m];
      $("#" + i).append("<div class='star'></div>");
      $("#astuce-" + i).toggle();
    }
    Reveal.initialize({
      controls: true,
      progress: true,
      history: true,
      center: true,
      transition: 'concave',
      dependencies: [
        {
          src: 'lib/js/classList.js',
          condition: function() {
            return !document.body.classList;
          }
        }, {
          src: 'plugin/markdown/marked.js',
          condition: function() {
            return !!document.querySelector('[data-markdown]');
          }
        }, {
          src: 'plugin/markdown/markdown.js',
          condition: function() {
            return !!document.querySelector('[data-markdown]');
          }
        }, {
          src: 'plugin/highlight/highlight.js',
          async: true,
          callback: function() {
            return hljs.initHighlightingOnLoad();
          }
        }, {
          src: 'plugin/zoom-js/zoom.js',
          async: true
        }, {
          src: 'plugin/notes/notes.js',
          async: true
        }
      ]
    });
    resize = function() {
      var s, size, space;
      size = Math.round(50 * zoom / 100);
      space = Math.round(5 * zoom / 100);
      s = ".carte {\n  line-height : " + size + "px;\n  width       : " + size + "px;\n  height      : " + size + "px;\n  background-size : 100%;\n}\n.fraction {\n  margin : 150px " + space + " 0px " + space + ";\n}\n.fraction[data-style='true'], .bsign {\n  margin : 150px " + space + " 0px " + space + ";\n}\n\n.bsign {\n  font-size : " + size + "px;";
      return $("#restyler").text(s);
    };
    $("#slider-zoom").slider({
      range: "max",
      min: 50,
      max: 150,
      step: 1,
      value: 100,
      slide: function(event, ui) {
        $("#amount-zoom").html(ui.value);
        zoom = parseInt($("#amount-zoom").html());
        return resize();
      }
    });
    $(".close").on("click", function() {
      return $(this).parent().hide();
    });
    $("#back").button().on("click", function() {
      return $("#reveal,#screen").toggle();
    });
    $(".play").button().on("click", function() {
      return play();
    });
    $(".next").on("click", function() {
      return play(level++);
    });
    $(".up").on("click", function() {
      return $("#reveal,#screen").toggle();
    });
    return $(".level").on("click", function() {
      var ref1, ref2;
      ref1 = $(this).attr("id").split("-"), chapter = ref1[0], level = ref1[1];
      ref2 = [parseInt(chapter), parseInt(level)], chapter = ref2[0], level = ref2[1];
      $("#reveal,#screen").toggle();
      return play();
    });
  });

}).call(this);
